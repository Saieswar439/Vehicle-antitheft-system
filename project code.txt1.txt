#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <SoftwareSerial.h>
#include <Adafruit_Fingerprint.h>
#include <DFRobot_SIM808.h>

// LCD Configuration
LiquidCrystal_I2C lcd(0x27, 16, 2);

// Software Serial Ports
SoftwareSerial mySerial(2, 3);   // Fingerprint Sensor RX, TX
DFRobot_SIM808 sim808(&Serial);  // SIM808 for GSM

// Pin Definitions
#define IGNITION_RELAY 7
#define SHOCK_RELAY 8
#define BUZZER_PIN 9

// Owner's Phone Number
const char ownerPhone[] = "+918106948689";
// Fingerprint Names (Stored in Flash Memory to Save RAM)
const char* fingerprintNames[] = {"Unknown", "Madhulatha", "Sai Eswar", "Kranthi", "Pravalika", "Kusuma"};

bool isStarted = false;

void setup() {
  Serial.begin(115200);
  mySerial.begin(57600);

  // LCD Initialization
  lcd.init();
  lcd.backlight();
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print(F("Welcome User"));
  delay(2000);
  lcd.clear();
  lcd.print(F("Vehicle Security"));
  lcd.setCursor(0, 1);
  lcd.print(F("System Booting..."));
  delay(1000);

  // Pin Setup
  pinMode(IGNITION_RELAY, OUTPUT);
  pinMode(SHOCK_RELAY, OUTPUT);
  pinMode(BUZZER_PIN, OUTPUT);
  digitalWrite(IGNITION_RELAY, LOW);
  digitalWrite(SHOCK_RELAY, LOW);
  digitalWrite(BUZZER_PIN, LOW);

  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print(F("Initialising"));
  lcd.setCursor(0, 1);
  lcd.print(F("SIM808..."));
  Serial.println(F("Initializing SIM808..."));
  while (!sim808.init()) {
    Serial.println(F("❌ SIM808 init error. Retrying..."));
    lcd.clear();
    lcd.print(F("SIM808 Error"));
    lcd.setCursor(0, 1);
    lcd.print(F("Retrying..."));
    delay(1000);
  }
  Serial.println(F("✅ SIM808 Init Success."));
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print(F("GSM Initialized"));
  delay(500);
  
  clearAllSMS();
  
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print(F("System Starting.."));
  delay(2000);

  // Fingerprint Sensor Initialization
  if (initializeFingerprintSensor()) {
    Serial.println(F("Fingerprint Sensor OK"));
    lcd.clear();
    lcd.print(F("Fingerprint OK"));
  } else {
    Serial.println(F("Fingerprint Sensor Error!"));
    lcd.clear();
    lcd.print(F("Fingerprint Error"));
    while (1);
  }
  sendSMS(ownerPhone, "System Started");
}

void loop() {
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print(F("Place Finger..."));
  Serial.println(F("Waiting for Fingerprint..."));

  int userID = getFingerprintID();

  if (userID > 0 && userID <= 5) {
    digitalWrite(BUZZER_PIN, HIGH);
    delay(500);
    digitalWrite(BUZZER_PIN, LOW);
    grantAccess(userID);
  } else if (userID == -1) {
    Serial.println(F("No fingerprint detected. Waiting..."));
    lcd.clear();
    lcd.print(F("Place Finger..."));
  } else {
    handleUnauthorizedAccess();
  }
  delay(2000);
  if (isStarted) {
    waitForOwnerResponse();
  }
}

bool initializeFingerprintSensor() {
  Adafruit_Fingerprint finger = Adafruit_Fingerprint(&mySerial);
  finger.begin(57600);
  return finger.verifyPassword();
}

int getFingerprintID() {
  Adafruit_Fingerprint finger = Adafruit_Fingerprint(&mySerial);
  if (finger.getImage() != FINGERPRINT_OK) return -1;
  if (finger.image2Tz() != FINGERPRINT_OK) return 0;
  if (finger.fingerFastSearch() != FINGERPRINT_OK) return 0;
  return finger.fingerID;
}

void grantAccess(int userID) {
  Serial.print(F("Access Granted: "));
  Serial.println(fingerprintNames[userID]);

  lcd.clear();
  lcd.print(fingerprintNames[userID]);
  lcd.setCursor(0, 1);
  lcd.print(F("Started Vehicle"));

  if (digitalRead(IGNITION_RELAY) == LOW) digitalWrite(IGNITION_RELAY, HIGH);
  isStarted = true;
  char message[50];
  snprintf(message, sizeof(message), "%s started the vehicle.", fingerprintNames[userID]);
  sendSMS(ownerPhone, message);
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print(F("Sending Location"));
  Serial.println(F("Sending Location..."));
  sendSMS(ownerPhone, "https://www.google.com/maps/search/?api=1&query=18.270583,83.807969");
}

void handleUnauthorizedAccess() {
  Serial.println(F("Unauthorized Access Detected!"));

  lcd.clear();
  lcd.print(F("Unauthorized!"));

  digitalWrite(BUZZER_PIN, HIGH);
  delay(1000);
  digitalWrite(BUZZER_PIN, LOW);
  if (digitalRead(IGNITION_RELAY) == HIGH) digitalWrite(IGNITION_RELAY, LOW);
  sendSMS(ownerPhone, "Unauthorised Access detected.\n Reply ACCEPT/DENY to Start or Idle the vehicle.\r" https://www.google.com/maps/search/?api=1&query=18.270583,83.807969);
  waitForOwnerResponse();
}

void displayMessage(String message, int delayTime) {
  lcd.clear();  // Clear the LCD screen
  int newlineIndex = message.indexOf('\n');  // Check for multi-line message
  Serial.println(message);
  if (newlineIndex != -1) {
    // Display the first line
    lcd.setCursor(0, 0);
    lcd.print(message.substring(0, newlineIndex));

    // Display the second line
    lcd.setCursor(0, 1);
    lcd.print(message.substring(newlineIndex + 1));
  } else {
    // Display single-line message
    lcd.setCursor(0, 0);
    lcd.print(message);
  }

  if (delayTime > 0) {
    delay(delayTime);  // Optional delay after displaying the message
  }
}

void clearAllSMS() {
  Serial.println(F("Clearing all SMS..."));
  displayMessage("Clearing SMS...", 1000);
  while (sim808.isSMSunread()) {
    sim808.deleteSMS(1);  // Delete SMS one by one
  }
  Serial.println(F("All SMS cleared."));
  displayMessage("SMS Cleared", 1000);
}

bool sendSMS(const char* number, const char* msg) {
  Serial.print(F("📤 Sending SMS to: "));
  Serial.println(number);
  Serial.print(F("Message: "));
  Serial.println(msg);

  if (sim808.sendSMS(number, msg)) {
    Serial.println(F("✅ SMS Sent Successfully!"));
    lcd.clear();
    lcd.print(F("SMS Sent!"));
    delay(1000);
    return true;
  } else {
    Serial.println(F("❌ SMS Failed!"));
    lcd.clear();
    lcd.print(F("SMS Sent!"));
    delay(1000);
    return false;
  }
}

void trimMessage(char* str) {
  char* end;
  while (isspace((unsigned char)*str)) str++;
  end = str + strlen(str) - 1;
  while (end > str && isspace((unsigned char)*end)) end--;
  *(end + 1) = '\0';
}

void toUpperCase(char* str) {
  while (*str) {
    *str = toupper((unsigned char)*str);
    str++;
  }
}

void waitForOwnerResponse() {
  lcd.clear();
  lcd.print(F("Waiting for SMS..."));
  Serial.println(F("Waiting for owner's response..."));

  char message[160];
  char phone[16];
  char datetime[24];

  unsigned long startTime = millis();
  while (millis() - startTime < 50000) {  // Wait for 50 seconds
    int messageIndex = sim808.isSMSunread();
    if (messageIndex > 0) {
      sim808.readSMS(messageIndex, message, 160, phone, datetime);
      sim808.deleteSMS(messageIndex);

      Serial.print(F("📩 Received: '"));
      Serial.print(message);
      Serial.println(F("'"));

      trimMessage(message);
      toUpperCase(message);
      Serial.print("Formatted Message : ");
      Serial.println(message);

      lcd.clear();
      lcd.print(F("Received SMS:"));
      lcd.setCursor(0, 1);
      lcd.print(message);

      if (strcmp(message, "ACCEPT") == 0) {
        sendSMS(phone, "Vehicle Started");
        Serial.println(F("✅ Vehicle Started"));
        lcd.clear();
        lcd.print(F("Vehicle Started"));
        isStarted = true;
        if (digitalRead(IGNITION_RELAY) == LOW) digitalWrite(IGNITION_RELAY, HIGH);
        break;
      } else if (strcmp(message, "DENY") == 0) {
        sendSMS(phone, "Vehicle Access Denied!");
        Serial.println(F("⛔ Access Denied"));
        lcd.clear();
        lcd.print(F("Access Denied"));
        isStarted = false;

        if (digitalRead(IGNITION_RELAY) == HIGH) digitalWrite(IGNITION_RELAY, LOW);

        for (int i = 0; i < 4; i++) {
          Serial.println(F("⚡ Delivering Shock!"));
          lcd.clear();
          lcd.print(F("SHOCK ACTIVATED!"));

          digitalWrite(SHOCK_RELAY, HIGH);
          delay(1500);
          digitalWrite(SHOCK_RELAY, LOW);
          Serial.println(F("Shock Paused..."));
          lcd.clear();
          lcd.print(F("Waiting..."));

          if (i < 3) delay(3500);
        }

        Serial.println(F("⚠️ Shock Sequence Completed."));
        lcd.clear();
        lcd.print(F("Access Blocked!"));
        break;
      } else if (strcmp(message, "GET STATUS") == 0) {
        char statusMessage[50];
        snprintf(statusMessage, sizeof(statusMessage), "Vehicle status: %s", isStarted ? "Started" : "Not Started");
        sendSMS(phone, statusMessage);
        Serial.println(F("ℹ️ Vehicle Status Sent"));
        lcd.clear();
        lcd.print(F("Status Sent"));
        break;
      } else if (strcmp(message, "STOP") == 0) {
        digitalWrite(IGNITION_RELAY, LOW);
        Serial.println("Vehicle Stopped by User");
        sendSMS(phone, "Vehicle Stopped by You");
        isStarted = false;
        lcd.clear();
        lcd.print(F("Vehicle Stopped"));
        break;
      } else if (strcmp(message, "GET LOCATION") == 0) {
        Serial.println(F("📍 Location Request Received! Sending GPS..."));
        sendSMS(phone, "https://www.google.com/maps/search/?api=1&query=18.270583,83.807969");
        lcd.clear();
        lcd.print(F("Location Sent"));
        break;
      } else {
        Serial.println(F("⚠️ Unknown Command Received!"));
        lcd.clear();
        lcd.print(F("Unknown Command"));
      }
    }
  }

  Serial.println(F("⏳ No response from owner. System remains locked."));
  lcd.clear();
  lcd.print(F("No Response"));
}